#### newly added Jan 9 2019
conROH <- read.table("/Volumes/@home/thesis/blasto/data_files/collapse500bp_roh_7orMore.bed", header=F, sep="\t", na.strings="NA")
names(conROH) <- c("CHROM", "START", "END")
head(conROH)
preROH <- read.table("/Volumes/@home/thesis/blasto/data_files/merged_roh_7ormore.bed", header=F, sep="\t", na.strings="NA")
names(preROH) <- c("CHROM", "START", "END")
head(preROH)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(dplyr))
require(vcfR)
#filepath <- "C://Users/Mary/PepLab/data/blasto/1K_genomes/SNPs_overlap_1k_combined_GTEx_antifungal.txt"
#filepath <- "C://Users/Mary/PepLab/data/blasto/1K_genomes/SNPs_overlap_mod_GTEx_antifungal.txt"
filepath <- "C://Users/Mary/PepLab/data/blasto/postdoc/blasto_9cases_consensusROH_mod_GTEx_antifungal.txt"
TG <- read.table(filepath, header = F, sep = '\t', stringsAsFactors = FALSE, na.strings = c("NA", "."))
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
#dat <- read.table("C:/Users/Mary/Desktop/hmong_roh_regions_VEPannotation_GTEx_antifungal.txt", header=F)
dat <- read.table("/Volumes/@home/thesis/blasto/data_files/hmong_roh_regions_VEPannotation_GTEx_antifungal.txt", header=F)
require(pegas)
require(ape)
require(poppr)
install.pacakges(c("pegas", "ape", "poppr"))
install.packages(c("pegas", "ape", "poppr"))
#Mtb <- read.FASTA("data/Mantel_OldWorld_snpAln_50per_noKI.fasta") #read the fasta
Mtb <- read.FASTA("data/snps_50per_552strains.fa") #read the fasta
#Mtb <- read.FASTA("data/Mantel_OldWorld_snpAln_50per_noKI.fasta") #read the fasta
Mtb <- ape::read.FASTA("data/snps_50per_552strains.fa") #read the fasta
setwd("~/Mtb_Phylogeography_v3/")
#Mtb <- read.FASTA("data/Mantel_OldWorld_snpAln_50per_noKI.fasta") #read the fasta
Mtb <- ape::read.FASTA("data/snps_50per_552strains.fa") #read the fasta
setwd("~/Mtb_Phylogeography")
#Mtb <- read.FASTA("data/Mantel_OldWorld_snpAln_50per_noKI.fasta") #read the fasta
Mtb <- ape::read.FASTA("data/snps_50per_552strains.fa") #read the fasta
genetic.dists = dist.dna(Mtb) #pairwise distance matrix computation
genetic.dists = ape::dist.dna(Mtb) #pairwise distance matrix computation
gm <- as.matrix(genetic.dists)
rownames(gm) <- sapply(strsplit(rownames(gm), "_"), "[[", 1)
colnames(gm) <- sapply(strsplit(colnames(gm), "_"), "[[", 1)
# Load meta data file containing the AMOVA bins
meta <- read.table("data/Dataset1.txt", header=T, sep="\t", na.strings="NA")
# Load meta data file containing the AMOVA bins
meta <- read.table("data/TableS1.txt", header=T, sep="\t", na.strings="NA")
head(meta)
#remove isolates not in meta file
samps <- intersect(rownames(gm),meta$BioSample)
gm <- gm[rownames(gm) %in% samps, colnames(gm) %in% samps]
gd <- as.dist(gm)
# Ordering for categories
samp_ord <- labels(gd)
# Generate the categories
l <- meta[match(as.factor(samp_ord), meta$BioSample), 'Lineage']
l <- as.factor(l)
# Generate the categories
l <- as.factor(meta[match(as.factor(samp_ord), meta$BioSample), 'Lineage'])
lev1 <- meta[match(as.factor(samp_ord), meta$BioSample), 'Level1'] #Botanical Level 1
un <- meta[match(as.factor(samp_ord), meta$BioSample), 'UN'] #UN region
# Convert the DNA bin to a genind object
Mtb.genind <- DNAbin2genind(Mtb)
# Convert the DNA bin to a genind object
Mtb.genind <- adegenet::DNAbin2genind(Mtb)
sample <- as.factor(samp_ord)
strata(Mtb.genind) <- data.frame(sample)
addStrata(Mtb.genind) <- data.frame(l)
addStrata(Mtb.genind) <- data.frame(lev1)
addStrata(Mtb.genind) <- data.frame(un)
adegenet::strata(Mtb.genind) <- data.frame(sample)
sample <- as.factor(samp_ord)
adegenet::strata(Mtb.genind) <- data.frame(sample)
adegenet::addStrata(Mtb.genind) <- data.frame(l)
adegenet::addStrata(Mtb.genind) <- data.frame(lev1)
adegenet::addStrata(Mtb.genind) <- data.frame(un)
# Convert the genind object to genclone object
Mtb.genclone <- as.genclone(Mtb.genind)
# Convert the genind object to genclone object
Mtb.genclone <- poppr::as.genclone(Mtb.genind)
search()
# Load packages
library(pegas)
library(ape)
library(poppr)
# Convert the genind object to genclone object
Mtb.genclone <- as.genclone(Mtb.genind)
#Break down
lin1 <- Mtb.genclone %>% setPop(~l) %>% popsub("1") %>% missingno("loci") %>% missingno("geno")
# Read in the names of random subsamples of UN subregions (n=20 per region)
subsamps <- read.table("data/biosamples_subsampling.txt", header=F, sep="\t", stringsAsFactors = FALSE)
subsamps <- data.frame(t(subsamps))
colnames(subsamps) <- paste("sub", seq(1,10), sep="")
head(subsamps)
perform_amova <- function(genclone) {
set.seed(1999)
lev1.am <- poppr.amova(genclone, ~lev1)
lev1.am.sig <- randtest(lev1.am, nrepet = 1000)
un.am <- poppr.amova(genclone, ~un)
un.am.sig <- randtest(un.am, nrepet = 1000)
return(list(lev1.am, lev1.am.sig, un.am, un.am.sig))
}
i=1
paste(i)
amovas.list <- c()
for (i in 1:4) {
subsample <- subsamps[,i]
subX <- Mtb.genclone %>% setPop(~sample) %>% popsub(paste(i)) %>% missingno("loci") %>% missingno("geno")
subX.amovas <- perform_amova(subX)
amovas.list[[i]] <- subX.amovas
}
names(amovas.list) <- paste("L", seq(1,4), sep="")
paste(i)
Mtb.genclone
# Run AMOVA for entire collection and each lineage
amovas.list <- c()
for (i in 1:4) {
subsample <- subsamps[,i]
subX <- Mtb.genclone %>% setPop(~l) %>% popsub(paste(i)) %>% missingno("loci") %>% missingno("geno")
subX.amovas <- perform_amova(subX)
amovas.list[[i]] <- subX.amovas
}
amovas.list
length(amovas.list)
OW.amovas.list <- c()
for (i in 1:10) {
subsample <- subsamps[,i]
subX <- Mtb.genclone %>% setPop(~sample) %>% popsub(sublist = subsample) %>% missingno("loci") %>% missingno("geno")
subX.amovas <- perform_amova(subX)
OW.amovas.list[[i]] <- subX.amovas
}
names(OW.amovas.list) <- paste("sub", seq(1,10), sep="")
length(OW.amovas.list)
OW.amovas.list[["full"]] <- perform_amova((Mtb.genclone %>% missingno("loci") %>% missingno("geno")))
length(OW.amovas.list)
OW.amovas.list
amovas.list
do.call(rbind, lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`))))
lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`)))
c(lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`))), "UN")
do.call(rbind, lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`))))
names(OW.amovas.list)
OW.amovas.df <- do.call(rbind, lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`)))) %>% data.frame()
head(OW.amovas.df)
names(OW.amovas.df) <- c("Between", "Within", "Total")
head(OW.amovas.df)
OW.amovas.df
OW.amovas.df$Sample <- names(OW.amovas.list)
OW.amovas.df
OW.amovas.list[[11]][[4]]$pvalue
do.call(rbind, lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[4]]$pvalue)))) %>% data.frame()
lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[4]]$pvalue))))
lapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[4]]$pvalue)))))
sapply(seq(1,11), function(x) data.frame(t(OW.amovas.list[[x]][[4]]$pvalue)))))
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`)
rbind(sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
names(OW.amovas.list))
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue),
)
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)
)
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% data.frame()
rbind(sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% data.frame()
OW <- rbind(sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% data.frame()
colnames(OW) <- names(OW.amovas.list)
OW
OW <- rbind(sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% data.frame() %>% t()
OW
OW <- rbind(sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame()
OW
OW <- rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame()
OW
names(OW) <- ("Between", "Within", "Total", "pvalue")
names(OW) <- c("Between", "Within", "Total", "pvalue")
OW
names(OW) <- c("Sample", "Between", "Within", "Total", "pvalue")
OW
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue))
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame()
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame()
rbind(rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame(),
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame())
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% mutate(Test="UN")
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN")
# Extract information of interest
OW <- rbind(rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"),
rbind(names(OW.amovas.list),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,11), function(x) OW.amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="Bot"))
names(OW) <- c("Sample", "Between", "Within", "Total", "pvalue", "Test")
OW
length(amovas.list)
LL <- rbind(rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"),
rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"))
names(LL) <- c("Sample", "Between", "Within", "Total", "pvalue", "Test")
LL
names(amovas.list)
amovas.list
paste("L", seq(1,4), sep="")
names(amovas.list) <- paste("L", seq(1,4), sep="")
LL <- rbind(rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"),
rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"))
names(LL) <- c("Sample", "Between", "Within", "Total", "pvalue", "Test")
LL
LL <- rbind(rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[3]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[4]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="UN"),
rbind(names(amovas.list),
sapply(seq(1,4), function(x) amovas.list[[x]][[1]]$componentsofcovariance$`%`),
sapply(seq(1,4), function(x) amovas.list[[x]][[2]]$pvalue)) %>% t() %>% data.frame() %>% dplyr::mutate(Test="Bot"))
names(LL) <- c("Sample", "Between", "Within", "Total", "pvalue", "Test")
LL
head(OW)
OW[grep("sub", OW$Sample),]
OW[OW$Sample=="full",]
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=Between, fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=Between)) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=Between), color="red") +
theme_bw() +
xlab("") +
ylab("Between") +
theme(#axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank(),
legend.position="none")
libary(ggplot)
library(ggplot2)
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=Between, fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=Between)) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=Between), color="red") +
theme_bw() +
xlab("") +
ylab("Between") +
theme(#axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank(),
legend.position="none")
str(OW)
str(LL)
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)), fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)))) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=as.numeric(as.character(Between))), color="red") +
theme_bw() +
xlab("") +
ylab("Between") +
theme(#axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank(),
legend.position="none")
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)), fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)))) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=as.numeric(as.character(Between))), color="red") +
theme_bw() +
xlab("") +
ylab("Variance Between Regions") +
theme(#axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank(),
legend.position="none")
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)), fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)))) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=as.numeric(as.character(Between))), color="red") +
theme_bw() +
xlab("") +
ylab("Variance Between Regions") +
theme(panel.grid = element_blank(),
legend.position="none")
LL
OW
rbind(LL, OW)
write.table(rbind(LL, OW), file="data/AMOVA_results.txt", quote=FALSE, sep="\t", eol="\n", row.names=FALSE, col.names=TRUE, qmethod="double")
# And Plot
ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)), fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)))) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=as.numeric(as.character(Between))), color="red") +
theme_bw() +
xlab("") +
ylab("Variance Between Regions") +
theme(panel.grid = element_blank(),
legend.position="none")
# And Plot
FigS3C <- ggplot() +
geom_boxplot(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)), fill=Test), alpha=0.5) +
scale_fill_manual(values=c("#FF9999", "#99CCFF")) +
geom_point(data=OW[grep("sub", OW$Sample),], aes(x=Test, y=as.numeric(as.character(Between)))) +
geom_point(data=OW[OW$Sample=="full",], aes(x=Test, y=as.numeric(as.character(Between))), color="red") +
theme_bw() +
xlab("") +
ylab("Variance Between Regions") +
theme(panel.grid = element_blank(),
legend.position="none")
FigS3C
ss <- read.table("/Users/moneill/Mtb_Phylogeography/data/lineage_diversity_estimates.txt", header=T, stringsAsFactors = F, na.strings=c("nan", "None", "-inf"))
str(ss)
# Read in the data
ss <- read.table("/Users/moneill/Mtb_Phylogeography/data/lineage_diversity_estimates.txt", header=T, stringsAsFactors = F, na.strings=c("nan", "None", "-inf"))
str(ss)
ss <- separate(ss, Alignment, into=c("sample", "lineage"), remove=FALSE)
ss <- dplyr::separate(ss, Alignment, into=c("sample", "lineage"), remove=FALSE)
ss <- tidyr::separate(ss, Alignment, into=c("sample", "lineage"), remove=FALSE)
table(ss$sample)
ss
str(ss)
# Add the estimates from the Full Alignment (calculated previously)
fullSamp_all <- data.frame("fullSamp_all", "fullSamp", "all", 2.13e-03, 2.80e-04, NA)
names(fullSamp_all) <- colnames(ss)
ss <- rbind(ss, fullSamp_all)
table(ss$sample)
# Data wrangling
ss$lineage <- gsub("lin", "Lineage ", ss$lineage)
ss$lineage <- gsub("all", "Old World Collection", ss$lineage)
ss.m <- melt(ss, id.vars=c("Alignment", "sample", "lineage"))
ss.m$col <- as.factor(ifelse(substr(ss.m$sample, 1, 3) == "sub", 0, 1))
library(tidyr)
library(dplyr)
library(ggplot2)
library(reshape2)
ss.m <- melt(ss, id.vars=c("Alignment", "sample", "lineage"))
ss.m$col <- as.factor(ifelse(substr(ss.m$sample, 1, 3) == "sub", 0, 1))
FigS3A <- ggplot() +
geom_boxplot(data=filter(ss.m, variable == "Pi" & sample != "fullSamp"), aes(x=lineage, y=value)) +
geom_jitter(data=filter(ss.m, variable == "Pi" & sample != "fullSamp"), aes(x=lineage, y=value)) +
geom_point(data=filter(ss.m, variable == "Pi" & sample == "fullSamp"), aes(x=lineage, y=value), color="red") +
theme_bw() +
xlab("") +
ylab(expression(pi)) +
theme(axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank())
FigS3A
FigS3B <- ggplot() +
geom_boxplot(data=filter(ss.m, variable == "Theta" & sample != "fullSamp"), aes(x=lineage, y=value)) +
geom_jitter(data=filter(ss.m, variable == "Theta" & sample != "fullSamp"), aes(x=lineage, y=value)) +
geom_point(data=filter(ss.m, variable == "Theta" & sample == "fullSamp"), aes(x=lineage, y=value), color="red") +
theme_bw() +
xlab("") +
ylab(expression(theta)) +
theme(axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank())
FigS3B
ss.m$type <- as.factor(substr(ss.m$sample, 1, 3))
means <- ss.m %>%
group_by(type, variable, lineage) %>%
summarise(mean=mean(value))
means.wide <- spread(means, type, mean)
ggplot(filter(means.wide, variable != "TajimasD"), aes(x=ful, y=sub, color=lineage)) +
facet_wrap(~variable, scales = "free") +
scale_color_manual(values = c("pink", "blue", "purple", "red", "darkred", "darkgreen", "#FFCC33", "black")) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank())
full <- filter(ss.m, variable != "TajimasD" & type == "ful") %>% select(variable, lineage, sample, value)
comp <- filter(ss.m, variable != "TajimasD" & type == "sub") %>% select(variable, lineage, sample, value)
comp$full <- full[match(paste(comp$variable, comp$lineage, sep="-"), paste(full$variable, full$lineage, sep="-")), 'value']
ggplot(comp, aes(x=full, y=value, color=lineage)) +
facet_wrap(~variable, scales = "free") +
scale_color_manual(values = c("pink", "blue", "purple", "red", "darkred", "darkgreen", "#FFCC33", "black")) +
geom_point() +
theme_bw() +
theme(panel.grid = element_blank()) +
xlab("Full Collection") +
ylab("Subsampled Collection")
sumComp <- comp %>%
group_by(variable, lineage) %>%
summarise(mean=mean(value), min=min(value), max=max(value))
sumComp$full <- full[match(paste(sumComp$variable, sumComp$lineage, sep="-"), paste(full$variable, full$lineage, sep="-")), 'value']
ggplot(sumComp) +
facet_wrap(~variable, scales = "free") +
geom_point(aes(x=full, y=mean, color=lineage)) +
geom_errorbar(aes(x=full, ymin=min, ymax=max, color=lineage)) +
scale_color_manual(values = c("pink", "blue", "purple", "red", "darkred", "darkgreen", "#FFCC33", "black")) +
theme_bw() +
theme(panel.grid = element_blank()) +
xlab("Full Collection") +
ylab("Subsampled Collection")
FigS3A <- ggplot(filter(sumComp, variable=="Theta")) +
geom_point(aes(x=full, y=mean, color=lineage)) +
geom_errorbar(aes(x=full, ymin=min, ymax=max, color=lineage)) +
scale_color_manual(values = c("pink", "blue", "purple", "red", "darkred", "darkgreen", "#FFCC33", "black")) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
xlab("Complete Sample") +
ylab("Subsample") +
ggtitle(expression("Theta"))
FigS3A
FigS3B <- ggplot(filter(sumComp, variable=="Pi")) +
geom_point(aes(x=full, y=mean, color=lineage)) +
geom_errorbar(aes(x=full, ymin=min, ymax=max, color=lineage)) +
scale_color_manual(values = c("pink", "blue", "purple", "red", "darkred", "darkgreen", "#FFCC33", "black")) +
theme_bw() +
theme(panel.grid = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
xlab("Complete Sample") +
ylab("Subsample") +
ggtitle(expression("Pi"))
FigS3B
plot_grid(FigS3A, FigS3B)
library(cowplot)
plot_grid(FigS3A, FigS3B)
require(geosphere)
require(ape)
require(vegan)
require(ggplot2)
# Set the directory
setwd("~/Mtb_Phylogeography")
# Load meta data file
meta <- read.table("data/TableS1.txt", header=T, sep="\t", na.strings="NA", stringsAsFactors = FALSE)
meta <- meta[meta$Country != "Kiribati",] #Not on trade routes
samps <- meta$BioSample
############# Great Circle Distance between Isolates
# Extract coordinates
x <- meta[,c('sample_lon', 'sample_lat')]
rownames(x) <- meta$BioSample
y <- as.matrix(x)
# Calculate great circle distance between isolates
dvse <- apply(y, 1, FUN=function(X) distVincentyEllipsoid(X, y))
rownames(dvse) <- colnames(dvse)
#order the rows and columns
dvse <- dvse[order(rownames(dvse)), order(colnames(dvse))]
LL
